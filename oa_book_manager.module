<?php
// $Id$

/**
 * @file
 *  Provides group-localized book outline administration.
 */

include_once('oa_book_manager.features.inc');

/**
 * Implementation of hook_menu_alter().
 * Duplicate book reordering form into space.
 */
function oa_book_manager_menu_alter(&$items) {
  $items['notebook/manage/%node'] = $items['admin/content/book/%node'];
  $items['notebook/manage/%node']['page arguments'] = array('oa_book_admin_edit', 2);
  $items['notebook/manage/%node']['access callback'] = '_oa_book_manager_outline_access';
  $items['notebook/manage/%node']['access arguments'] = array(2);
  $items['notebook/manage/%node']['type'] = MENU_LOCAL_TASK;

  $items['notebook/manage'] = array(
    'title' => 'Manage Books',
    'description' => "Manage your group's book outlines.",
    'page callback' => 'oa_book_manager_admin_overview',
    'access callback' => '_oa_book_manager_outline_access',
    'access arguments' => array(),
    'type' => MENU_LOCAL_TASK,
  );
}

/**
 * Menu callback for notebook/manage
 */
function oa_book_manager_admin_overview() {
  return t('Click on a book to the right to rearrange the hierarchy of pages.');
}

/**
 * Menu callback for notebook/manage/%node
 */
function oa_book_admin_edit($form_state, $node) {
//  drupal_set_title($node->title);
  $form = book_admin_edit($form_state, $node);
  $form['preamble'] = array(
    '#value' => '<div id="page-title"><h2 class="page-title">Book: ' . l($node->title, 'node/' . $node->nid) . '</h2></div>',
    '#weight' => -50,
  );
  $form['#validate'][] = 'book_admin_edit_validate';
  $form['#submit'][] = 'book_admin_edit_submit';

  return $form;
}

/**
 * Access callback for notebook/manage/%node..
 * @see _book_outline_access()
 */
function _oa_book_manager_outline_access($node = NULL) {
  $space = spaces_get_space();
  return og_is_group_admin($space->group) || user_access('administer books');
}

/**
 * Implementation of hook_context_default_contexts_alter().
 */
function oa_book_manager_context_default_contexts_alter(&$contexts) {
  $contexts['book_listing']->conditions['path']['values']['notebook/manage'] = 'notebook/manage';
  $contexts['book_listing']->conditions['path']['values']['notebook/manage/*'] = 'notebook/manage/*';
}

/**
 * Implementation of hook_block().
 */
function oa_book_manager_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      return array('books' => array('info' => t('Manage Books')));
    case 'configure':
      return array();
    case 'save':
      return;
    case 'view':
      $block = array();
      switch ($delta) {
        case 'books':
          $block['subject'] = t('Manage Books');
          $block['content'] = og_book_manager_books_block_content();
          break;
      }
      return $block;
  }
}

/**
 * Block content callback for books block.
 */
function og_book_manager_books_block_content() {
  $books = views_get_view('book_current');
  $books->execute_display('default', array());

  $rows = array();
  foreach ($books->result as $book) {
    $rows[] = l($book->node_title, 'notebook/manage/' . $book->nid) 
      . ' [' . l(t('manage'), 'notebook/manage/' . $book->nid)
      . ' &middot; ' . l(t('edit'), 'node/' . $book->nid . '/edit')
      . ' &middot; ' . l(t('view'), 'node/' . $book->nid) . ']';
  }

  return theme('item_list', $rows);
}